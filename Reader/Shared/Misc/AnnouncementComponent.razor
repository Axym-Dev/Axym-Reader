@namespace Reader.Shared.Misc


@using MudBlazor
@using Reader.Data.Misc
@using Microsoft.JSInterop
@using Markdig
@inject IJSRuntime JSRuntime

<div class="max-w-4xl px-8">
    <div class="mb-3 flex justify-between items-center">
        <div class="flex items-center">
            <MudChip Color="Announcement.Color">@Announcement.Type.ToString()</MudChip>
            @if (Announcement.Priority)
            {
                <MudChip Color="Color.Error">Priority</MudChip>
            }
            <h2 class="text-xl font-semibold m-2">
                @((MarkupString)Markdown.ToHtml(Announcement.Title))
            </h2>
        </div>
        <div>
            <MudChip Color="Color.Default" Disabled="true">@Announcement.Date.ToShortDateString()</MudChip>
        </div>
        @* <MudFab Color="Color.Secondary" Class="!shadow-sm" StartIcon="@Icons.Material.Filled.Cancel" OnClick="(() => { CloseAnnouncement(); MarkAsRead(); })" /> *@
    </div>
    <div>
        <p class="text-neutral-300">
            @((MarkupString)Markdown.ToHtml(Announcement.Description))
        </p>
    </div>
    <div class="my-6 flex justify-end">
        <MudButton OnClick="MarkAsRead" Class="m-2" Href="@Announcement.Action.Url" StartIcon="@Icons.Material.Filled.ArrowRight" Target="_blank" Variant="Variant.Filled" Color="Color.Primary">@Announcement.Action.Title</MudButton>
    </div>
</div>


@code {
    [Parameter]
    public Announcement Announcement { get; set; } = default!;

    [Parameter]
    public bool Read { get; set; }

    [Parameter]
    public Action CloseAnnouncement { get; set; }

    public bool IsOpen { get; set; } = false; 

    private async Task MarkAsRead()
    {
        IsOpen = false;
        await JSRuntime.InvokeVoidAsync("markAnnouncementRead", Announcement.Id);
    }

}

