@namespace Reader.Shared.Product

@using MudBlazor
@using Reader.Data.Reading
@using Reader.Modules.Reading
@using Reader.Modules

<div class="my-5 py-5 md:py-3 px-5 rounded-lg shadow-xl" style="background-color: rgb(22, 22, 26); overflow-wrap: anywhere;">
    <div class="md:flex justify-between items-center">
        <div class="w-full inline-block grid md:grid-cols-2 overflow-hidden pl-1 pr-5 md:ml-3 items-center">
            <h3 class="text-b700">
                @State.Title
            </h3>
        </div>
        <div class="inline-block flex justify-end items-center">
            <MudFab OnClick="ToggleInfoPanelOpen" Color="Color.Secondary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Info" Class="m-2" />

            <MudPopover Open="@InfoPanelOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="rounded-lg shadow-xl bg-bgcol p-4 md:p-6">
                <div>
                    <MudChip Class="inline-block" Color="Color.Default" Disabled="false">Position: @State.Position</MudChip>
                    <br />
                    <MudChip Class="inline-block" Color="Color.Default" Disabled="false">Last read: @State.LastRead</MudChip>
                    <br />
                    <MudChip Class="inline-block" Color="Color.Default" Disabled="false">Source: @State.Source.ToString() (@State.SourceDescription)</MudChip>
                </div>
            </MudPopover>

            <MudButton Disabled="@(ReaderContext.StateManager.CurrentState == State)" Variant="Variant.Filled" OnClick="@(async () => { await ReaderContext.StateManager.SwitchToState(State); })" Color="Color.Secondary" Class="m-2 whitespace-nowrap">
                Load
            </MudButton>

            <MudFab Disabled="@(ReaderContext.StateManager.CurrentState == State)" OnClick="@(async () => { await ReaderContext.StateManager.DeleteState(State); })" Color="Color.Secondary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Class="m-3" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ReaderState State { get; set; } = default!;

    [Parameter]
    public ReaderContext ReaderContext { get; set; } = default!;

    private bool InfoPanelOpen { get; set; }

    protected override void OnInitialized()
    {
        
    }

    private void ToggleInfoPanelOpen()
    {
        InfoPanelOpen = !InfoPanelOpen;
    }

}