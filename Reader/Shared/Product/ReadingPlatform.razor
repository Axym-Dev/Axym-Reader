@namespace Reader.Shared.Product

@using MudBlazor
@using Reader.Shared
@using Reader.Modules
@using Reader.Modules.Logging
@using Reader.Modules.Product
@using Newtonsoft.Json
@using Reader.Data.Storage
@using Reader.Data.Product
@using Reader.Data
@using Reader.Data.ProductExceptions
@inject IJSRuntime JSRuntime
@inject Constants constants
@inject MainStorage mainstorage
@inject AppConfig config
@inject ISnackbar Snackbar

<div class="mb-24">
    <ReaderView ReaderContext="ReaderContext" />
</div>

<div class="flex justify-between items-center mb-15">
    <h1 class="text-3xl text-center text-b700 text-gray-300">
        Saved Texts
    </h1>
    <div>
        <MudButton Variant="Variant.Filled" OnClick="@ToggleNewTextPanelOpen" Color="Color.Primary" Class="m-2 !py-5 !px-5 hover:!bg-neutral-900 centered-button-icon">
            <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> New Text
        </MudButton>
        <MudPopover Open="@NewTextPanelOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Class="rounded-lg shadow-xl bg-bgcol p-4 md:p-6">
            <div class="m-8 md:m-12" style="width: min(30rem, 90vw);">
                <div>
                    <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                        1) Extract from website
                    </h5>
                    <MudTextField T="string" Label="Url" Variant="Variant.Outlined" @bind-Value="@ScrapeInputs.Url" />
                    <MudRadioGroup T="string" @bind-Value="@ScrapeInputs.NewTextInputMethodString" SelectedOptionChanged="SetNewTextInputMethodString">
                    </MudRadioGroup>
                    <MudSelect Color="Color.Tertiary" Class="mud-select-table" Label="Font"
                               T="string"
                               @bind-Value="ScrapeInputs.NewTextInputMethodString">
                        <MudSelectItem T="string" Value="@("Largest article subsection")" Color="Color.Tertiary">Largest article subsection</MudSelectItem>
                        <MudSelectItem T="string" Value="@("XPath")" Color="Color.Tertiary">XPath</MudSelectItem>
                    </MudSelect>
                    @if (ScrapeInputs.NewTextInputMethodString == "XPath")
                    {
                        <div class="my-4">
                            <MudTextField T="string" Label="XPath" Class="my-2" Variant="Variant.Outlined" @bind-Value="@ScrapeInputs.XPathInputs.XPath" />
                            <MudSwitch T="bool" Class="my-2" Label="Select all elements that match" @bind-Checked="@ScrapeInputs.XPathInputs.SelectAll" />
                        </div>
                    }
                    <MudButton Variant="Variant.Filled" OnClick="@SubmitScrapingForm" Color="Color.Primary" Class=" hover:!bg-neutral-900">
                        Load
                    </MudButton>
                </div>
                <MudDivider Class="my-4 md:my-8" />
                <div class="">
                    <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                        2) File upload
                    </h5>
                    <p class="my-2">
                        Supported file formats: @ProductStorage.SupportedFileImports
                    </p>
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf, .txt, .md, .html, .epub" FilesChanged="HandleFileUpload" MaximumFileCount="25" Class="">
                        <ButtonTemplate>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload Files
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </div>
                <MudDivider Class="my-4 md:my-8" />
                <div>
                    <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                        3) Empty fields
                    </h5>
                    <MudButton Variant="Variant.Filled" OnClick="@ReaderContext.HandleNewText" Color="Color.Secondary" Class="hover:!bg-neutral-900">
                        Create
                    </MudButton>
                </div>
            </div>
        </MudPopover>
    </div>
</div>

<div>
    @foreach (var savedState in savedStates) {
        <div class="my-5 p-4 px-5 rounded-lg shadow-xl" style="background-color: rgb(22, 22, 26); overflow-wrap: anywhere;">
            <div class="flex justify-between">
                <h3 class="text-b700 text-xl">
                    @savedState.Title
                </h3>
                <p class="text-gray-400 min-w-20">
                    @savedState.LastRead
                </p>
            </div>
            <div class="my-4">
                <p class="text-gray-500">
                    @(savedState.Text[..Math.Min(120,savedState.Text.Length)])...
                </p>
            </div>
            <div>
                <MudProgressLinear Color="Color.Tertiary" Rounded="true" Size="Size.Medium" Value="@((double)savedState.Position / savedState.Text.Split(textSep).Length * 100)" />
            </div>
            <div class="flex justify-between mt-3">
                <MudFab Variant="Variant.Filled" OnClick="@(async () => { await DeleteTextState(savedState.Title); })" Color="Color.Secondary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Class="m-3" />
                <MudButton Variant="Variant.Filled" OnClick="@(async () => { await LoadTextState(savedState); })" Color="Color.Secondary" Class="m-3">
                    Load
                </MudButton>
            </div>
        </div>
    }
</div>

@code {
    public ReaderContext ReaderContext = default!;

    private string textSep = " ";

    List<ReaderState> savedStates = new();

    bool NewTextPanelOpen = false;
    public ScrapeInputs ScrapeInputs = new();


    protected override async Task OnInitializedAsync()
    {
        ReaderContext = new(
            new SiteInteraction(
                InvokeAsync,
                StateHasChanged,
                JSRuntime
            )
        );

        await ReaderContext.TriggerOnInitializedEvents();

        Log.Verbose("ReaderPlatform: OnInitializedAsync");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // load state
            await SetUpSavedStates();
            // load config
            await ReaderContext.TriggerAfterFirstRenderEvents();
        }
    }

    private async Task SetUpSavedStates() {
        await ReloadSavedStates();
        if (savedStates.Count>0) {
            await ReaderContext.SetState(savedStates[0]);
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task LoadTextState(ReaderState newState) {
        await ReaderContext.SetState(newState);

        await InvokeAsync(() => { StateHasChanged(); });

        Log.Verbose("ReaderPlatform: LoadTextState");
    }

    private async Task DeleteTextState(string title) {
        await JSRuntime.InvokeVoidAsync("deleteTextState", title);

        await ReloadSavedStates();
        await InvokeAsync(() => { StateHasChanged(); });

        Log.Verbose("ReaderPlatform: DeleteTextState");
    }

    private async Task ReloadSavedStates() {
        var savedStatesStr = await JSRuntime.InvokeAsync<string>("loadStateArraysStr", null);
        savedStates = JsonConvert.DeserializeObject<List<ReaderState>>(savedStatesStr) ?? new List<ReaderState>();
        savedStates = savedStates
            .OrderByDescending(x => x.LastRead)
            .ToList();

        Log.Verbose("ReaderPlatform: ReloadSavedStates");
    }



    private void ToggleNewTextPanelOpen()
    {
        if (!NewTextPanelOpen && ReaderContext.Manager.ReadingStatus)
            ReaderContext.Manager.StopReadingTask();

        NewTextPanelOpen = !NewTextPanelOpen;

        Log.Verbose("ReaderView: ToggleNewTextPanelOpen");
    }

    private async Task HandleFileUpload(IReadOnlyList<IBrowserFile> files)
    {
        try
        {
            await ReaderContext.HandleFileUpload(files);
        }
        catch (UnsupportedOperationException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            Log.Verbose("ReaderView: HandleCopyText - UnsupportedOperationException {error}, {stack}", e.Message, e.StackTrace ?? "No trace");
        }

        Log.Verbose("ReaderView: HandleCopyText");
    }

    private async Task SubmitScrapingForm()
    {
        var scraper = new ScrapingHandler();
        try
        {
            await ReaderContext.SetState(await scraper.Scrape(ScrapeInputs));
        }
        catch (ScrapingException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            Log.Verbose("ReaderView: SubmitScrapingForm - ScrapingException {error}, {stack}", e.Message, e.StackTrace ?? "No trace");
        }

        await InvokeAsync(() => { StateHasChanged(); });

        Log.Verbose("ReaderView: SubmitScrapingForm");
    }

    private async Task SetNewTextInputMethodString(string text)
    {
        ScrapeInputs.NewTextInputMethodString = text;
        await InvokeAsync(() => { StateHasChanged(); });
    }
}
